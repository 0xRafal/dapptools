#!/usr/bin/env bash
export SOLC_FLAGS="--evm-version constantinople"
for x in *.sol; do
  dapp test-standalone "$x"
done

error() {
    printf "fail: function '%s' at line %d.\n" "${FUNCNAME[1]}"  "${BASH_LINENO[0]}"
    exit 1
}

test_calldata_1() {
    local output
    output=$(seth --to-uint256 1 )
    [[ $output -eq "0x0000000000000000000000000000000000000000000000000000000000000001" ]] || error
}
test_calldata_1

test_calldata_2() {
    local output
    output=$(seth calldata 'bar(bool)' false)

    [[ $output -eq "0x6fae94120000000000000000000000000000000000000000000000000000000000000000" ]] || error
}
test_calldata_2

test_calldata_3() {
    local output
    output=$(seth calldata 'f(bytes[])' '[0x01, 0x01]')

    [[ $output -eq "0xd0b47c|| error
}
test_calldata_3

test_calldata_4() {
    local output
    output=$(seth calldata 'f(uint a)' '1')

    [[ $output -eq "0xd1e8aeb70000000000000000000000000000000000000000000000000000000000000001" ]] || error
}
test_calldata_4

test_calldata_5() {
    local output
    output=$(seth calldata 'f(uint a)' '0x01')

    [[ $output -eq "0xd1e8aeb70000000000000000000000000000000000000000000000000000000000000001" ]] || error
}
test_calldata_5

test_calldata_6() {
    local output
    output=$(seth calldata 'f(bool[], uint)' '[false, true]' 1)

    [[ $output -eq "0xd1e8aeb700000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001" ]] || error
}
test_calldata_6

test_calldata_7() {
    local output
    output=$(seth calldata 'f(bytes)' 0x01)

    [[ $output -eq "0xd1e8aeb7000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000000000000000" ]] || error
}
test_calldata_7

test_calldata_8() {
    local output
    output=$(seth calldata 'f(bytes[])' '[0x01]')

    [[ $output -eq "0xd1e8aeb7000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000000000000000" ]] || error
}
test_calldata_8

test_calldata_9() {
    local output
    output=$(seth calldata 'f(bytes[])' '[]')

    [[ $output -eq "0x36fe9f8d00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000" ]] || error
}
test_calldata_9

test_calldata_10() {
    local output
    output=$(seth calldata 'foo(bytes)' '0x')

    [[ $output -eq "0x30c8d1da00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000" ]] || error
}
test_calldata_10

test_calldata_10() {
    local output
    output=$(seth calldata 'foo(bytes[])' '[0x,0x]')

    [[ $output -eq "0x30c8d1da00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000" ]] || error
}
test_calldata_10

test_calldata_11() {
    local output
    output=$(seth calldata 'foo(bytes[])' '[0x, 0x]')

    [[ $output -eq "0x30c8d1da00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000" ]] || error
}
test_calldata_11

test_calldata_12() {
    local output
    output=$(seth calldata 'foo(bytes[])' '[0x12, 0x]')

    [[ $output -eq "0x41b1a0640000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000112000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" ]] || error
}
test_calldata_12

test_calldata_13() {
    local output
    output=$(seth calldata 'f(uint a)' $(seth --to-int256 -1))

    [[ $output -eq "0xd1e8aeb7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff" ]] || error
}
test_calldata_13


test_calldata_14() {
    local output
    output=$(seth calldata 'f(uint[][])' '[[1],[2,3]]')

    [[ $output -eq "0xd1e8aeb|| error
}
test_calldata_14

test_calldata_15() {
    local output
    output=$(seth calldata 'f(bool[][] yolo)' '[[false, true], [false]]')

    [[ $output -eq "0xd1e8aeb7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff" ]] || error
}
test_calldata_15


test_calldata_16() {
    local output
    output=$(seth calldata 'foo(string token)' '"hey"')

    [[ $output -eq "0xf31a6969000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000052268657922000000000000000000000000000000000000000000000000000000" ]] || error
}
test_calldata_16

test_calldata_17() {
    local output
    output=$(seth calldata 'foo(string token)' "  hey")

    [[ $output -eq "0xf31a6969000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000052268657922000000000000000000000000000000000000000000000000000000" ]] || error
}
test_calldata_17


test_calldata_18() {
    local output
    output=$(seth calldata 'foo(string[])' '["  hey","sad",""]')

    [[ $output -eq "0x223f0b6000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000722202068657922000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005227361642200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022222000000000000000000000000000000000000000000000000000000000000" ]] || error
}
test_calldata_18
